from aiohttp_requests import requests
from dataclasses import dataclass
# local imports
from .log import get_logger

logger = get_logger(__name__)


class ApiClient:
    """
    This class is used to make HTTP requests to the TruStar API.
    """

    def __init__(self, config=None):
        pass

    def _get_token(self):
        """
        Returns the token.  If no token has been generated yet, gets one first.
        :return: The OAuth2 token.
        """

        if self.token is None:
            self._refresh_token()
        return self.token

    def _refresh_token(self):
        """
        Retrieves the OAuth2 token generated by the user's API key and API secret.
        Sets the instance property 'token' to this new token.
        If the current token is still live, the server will simply return that.
        """

        # use basic auth with API key and secret
        client_auth = await requests.auth.HTTPBasicAuth(self.api_key, self.api_secret)

        # make request
        post_data = {"grant_type": "client_credentials"}
        response = await requests.post(self.auth, auth=client_auth, data=post_data,
                                       verify=self.verify, proxies=self.proxies)
        self.last_response = response

        # raise exception if status code indicates an error
        if 400 <= response.status_code < 600:
            message = f"{response.status_code}"
            raise requests.exceptions.HTTPError(message, response=response)

        # set token property to the received token
        self.token = response.json()["access_token"]

    def fetch(self):
        pass


@dataclass
class Param:
    key = str
    value = str

    def __str__(self):
        return f"{self.key}={self.value}"


class SearchIndicator(ApiClient):
    endpoint = "/api/2.0/indicators"

    params = []

    def setQueryTerm(self, query=None):
        self.params.append(Param("queryTerm", query))
        return self

    def setTimeStamp(self, timestamp):
        self.params.append(Param("timestamp", timestamp))
        return self

    def setStart(self, start=None):
        self.params.append(Param("start", start))
        return self

    def setTo(self, to):
        self.params.append(Param("timestamp", to))
        return self

    def _executor(self):
        params = "&".join(self.parmas)
        response = await requests.post(self.base_url + self.endpoint + params, auth=self.auth)
        return response

    def fetch(self):
        self.loop
        return
